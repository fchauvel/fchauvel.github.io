<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>software on Franck Chauvel</title>
    <link>//fchauvel.github.io/categories/software/</link>
    <description>Recent content in software on Franck Chauvel</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 08 Nov 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="//fchauvel.github.io/categories/software/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Software Architecture in Practice, by L. Bass et al (3rd Ed.)</title>
      <link>//fchauvel.github.io/2020/11/08/software-architecture-in-practice-by-l.-bass-et-al-3rd-ed./</link>
      <pubDate>Sun, 08 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>//fchauvel.github.io/2020/11/08/software-architecture-in-practice-by-l.-bass-et-al-3rd-ed./</guid>
      <description>Why should you read about Software architecture? Who even cares in these Agile and DevOps times. Should you, for whatever reason, still be interested, this book is a good place to approach software architecture from its theory side.
Here comes a book I had on my reading list for decades: Software Architecture in Practice, by L. Bass, P. Clements, and R. Kazman. I should have read this one when I was a PhD student, but I guess I was too lazy by then.</description>
    </item>
    
    <item>
      <title>Clean Architecture, by R. Martin</title>
      <link>//fchauvel.github.io/2020/11/01/clean-architecture-by-r.-martin/</link>
      <pubDate>Sun, 01 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>//fchauvel.github.io/2020/11/01/clean-architecture-by-r.-martin/</guid>
      <description>Does software architecture sound like a vague philosophical idea, disconnected from the practicalities of programming? Yes? This might be a good read.
I liked Clean Code and The Clean Coder by R. Martin, I felt tempted to read this other volume about software architecture. While I had been hesitating for some time, reading just enough software architecture by G. Fairbanks revamped my interest, and I took the (tiny) plunge. Besides, I got to try the Amazon Kindle for the first time, and I liked it!</description>
    </item>
    
    <item>
      <title>Designing Data-intensive Applications</title>
      <link>//fchauvel.github.io/2020/10/17/designing-data-intensive-applications/</link>
      <pubDate>Sat, 17 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>//fchauvel.github.io/2020/10/17/designing-data-intensive-applications/</guid>
      <description>Are you lost in the jungle of (big-)data technologies? Are you wondering how the Flink, Spark, Hive, Pig, Airflow and the likes fit together? Then this is the right book!
I found it as a recommendation on Goodreads.com. I wanted to learn about data technologies as I work more and more on this and I felt it was a good match: It was recent enough (2017), and was available on Google Play within my budget (EUR 12).</description>
    </item>
    
    <item>
      <title>Just Enough Software Architecture</title>
      <link>//fchauvel.github.io/2020/09/26/just-enough-software-architecture/</link>
      <pubDate>Sat, 26 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>//fchauvel.github.io/2020/09/26/just-enough-software-architecture/</guid>
      <description>If just like me, you lost faith in models and model-driven engineering (MDE) a long time ago, this book might help. It shows how to reconcile architecture and modelling with agility and maintaining real software.
Just enough software architecture advocates modelling software until we feel confident enough to proceed with writing code. That is, if some technical risks (availability, maintainability, etc.) are not yet under control, then we should (re-)think how architectural decisions that could help.</description>
    </item>
    
    <item>
      <title>Introducing Quick-check</title>
      <link>//fchauvel.github.io/2020/02/05/introducing-quick-check/</link>
      <pubDate>Wed, 05 Feb 2020 15:57:00 +0200</pubDate>
      
      <guid>//fchauvel.github.io/2020/02/05/introducing-quick-check/</guid>
      <description>I recently released quick-check, a JS library to easily declare data schema and validate and convert data accordinly.
Why Yet Another Library? I did not find anything that fits my need. I ended up writing some boiler-plate code, code to convert object trees (i.e., maps and lists) into home-grown classes, first while working on the CAMP project (Python), and then on my RPP project.
I did find though libraries to convert JSON files into home-grown classes, using annotations for instance, but in my case, I needed to accept both objects trees from multiple syntax files, say TOML and YAML for instance, which I parsed using different libraries.</description>
    </item>
    
    <item>
      <title>Software</title>
      <link>//fchauvel.github.io/software/</link>
      <pubDate>Thu, 18 Aug 2016 16:54:27 +0200</pubDate>
      
      <guid>//fchauvel.github.io/software/</guid>
      <description>I like coding and I am lucky enough to get the opportunity to develop open source software as part of my job. I have been involved in development of the tools including:
  GeneSIS helps you deploy and monitor complex smart IoT systems.
  CAMP helps you amplify your configuration tests. Given your docker resources, CAMP will run your tests in multiple environments, giving you confidence!
  CloudML helps you deploys your application accross multiple clouds, such as AWS, Azure, etc.</description>
    </item>
    
  </channel>
</rss>